// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	logger "github.com/danielblagy/go-utils/logger"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// AddContext provides a mock function with given fields: ctx
func (_m *Logger) AddContext(ctx ...interface{}) logger.Logger {
	var _ca []interface{}
	_ca = append(_ca, ctx...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddContext")
	}

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(...interface{}) logger.Logger); ok {
		r0 = rf(ctx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// DebugKV provides a mock function with given fields: message, kvs
func (_m *Logger) DebugKV(message string, kvs ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, kvs...)
	_m.Called(_ca...)
}

// ErrorKV provides a mock function with given fields: message, kvs
func (_m *Logger) ErrorKV(message string, kvs ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, kvs...)
	_m.Called(_ca...)
}

// FatalKV provides a mock function with given fields: message, kvs
func (_m *Logger) FatalKV(message string, kvs ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, kvs...)
	_m.Called(_ca...)
}

// InfoKV provides a mock function with given fields: message, kvs
func (_m *Logger) InfoKV(message string, kvs ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, kvs...)
	_m.Called(_ca...)
}

// WarnKV provides a mock function with given fields: message, kvs
func (_m *Logger) WarnKV(message string, kvs ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, kvs...)
	_m.Called(_ca...)
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
