// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	config_wrapper "github.com/danielblagy/go-utils/config-wrapper"
	mock "github.com/stretchr/testify/mock"
)

// ConfigWrapper is an autogenerated mock type for the ConfigWrapper type
type ConfigWrapper struct {
	mock.Mock
}

// GetValue provides a mock function with given fields: key
func (_m *ConfigWrapper) GetValue(key config_wrapper.ConfigKey) config_wrapper.ConfigValue {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetValue")
	}

	var r0 config_wrapper.ConfigValue
	if rf, ok := ret.Get(0).(func(config_wrapper.ConfigKey) config_wrapper.ConfigValue); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(config_wrapper.ConfigValue)
	}

	return r0
}

// LookupValue provides a mock function with given fields: key
func (_m *ConfigWrapper) LookupValue(key config_wrapper.ConfigKey) (config_wrapper.ConfigValue, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for LookupValue")
	}

	var r0 config_wrapper.ConfigValue
	var r1 bool
	if rf, ok := ret.Get(0).(func(config_wrapper.ConfigKey) (config_wrapper.ConfigValue, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(config_wrapper.ConfigKey) config_wrapper.ConfigValue); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(config_wrapper.ConfigValue)
	}

	if rf, ok := ret.Get(1).(func(config_wrapper.ConfigKey) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// NewConfigWrapper creates a new instance of ConfigWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConfigWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConfigWrapper {
	mock := &ConfigWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
